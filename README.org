* Passage

Passage provides correct and complete results for SPARQL queries, despite 
time quotas enforced by public SPARQL endpoints. Contrarily to state-of-the-art
approaches [1, 2], Passage works solely within SPARQL boundaries: a query execution
returns correct (possibly partial) results along with a SPARQL continuation query; 
executing the continuation query provides missing results, itself with another SPARQL 
continuation query; until termination.

** Installation

#+BEGIN_SRC shell :async :session clone-passage :results none
  git clone https://github.com/Chat-Wane/passage.git
  cd passage
#+END_SRC

#+BEGIN_SRC shell :async :session build-passage :results none
  mvn clean package
#+END_SRC

** Usage

- =passage.jar= provides a one time execution without server.
- =passage-server.jar= provides a server running passage/raw as a SPARQL endpoint.
- [[https://github.com/passage-org/passage-comunica][~passage-comunica~]] provides a client to automate the continuation loop.

- =raw.jar= provides a one time execution of a online sample-based query execution.


** References

[1] T. Minier, H. Skaf-Molli and P. Molli. /SaGe: Web Preemption for Public SPARQL Query services/.
    In Proceedings of the World Wide Web Conference (2019).

[2] R. Verborgh, M. Vander Sande, O. Hartig, J. Van Herwegen, L. De Vocht, B. De Meester,  G. Haesendonck and P. Colpaert. /Triple Pattern Fragments: A Low-Cost Knowledge Graph Interface for the Web/.
    In Journal of Web Semantics (2016).
