package fr.gdd.passage.commons.interfaces;

import java.io.Serializable;
import java.util.Set;

/**
 * Basic interface that a backend must implement to execute the code
 * generated by `sage-query-generator`. The generated code allows
 * pausing/resuming query execution, i.e., "preemptive" querying.
 */
public interface Backend<ID, VALUE, SKIP extends Serializable> extends AutoCloseable {

    /**
     * @param s The identifier of the subject.
     * @param p The identifier of the predicate.
     * @param o The identifier of the object.
     * @return An iterator that enables scanning triple patterns, and skipping triples.
     */
    BackendIterator<ID, VALUE, SKIP> search(final ID s, final ID p, final ID o);

    /**
     * @param s The identifier of the subject.
     * @param p The identifier of the predicate.
     * @param o The identifier of the object.
     * @param c The identifier of the context, also known as graph.
     * @return A scan iterator over quad patterns that allows skipping quads.
     */
    BackendIterator<ID, VALUE, SKIP> search(final ID s, final ID p, final ID o, final ID c);

    /**
     * @param s The identifier of the subject.
     * @param p The identifier of the predicate.
     * @param o The identifier of the object.
     * @param codes The SPOC codes of values that must be distinct.
     * @return A scan iterators on distinct values, that allows skipping to an offset.
     */
    default BackendIterator<ID, VALUE, SKIP> searchDistinct(final ID s, final ID p, final ID o, Set<Integer> codes) {
        throw new UnsupportedOperationException(); // not mandatory
    }

    /**
     * @param s The identifier of the subject.
     * @param p The identifier of the predicate.
     * @param o The identifier of the object.
     * @param c The identifier of the context (or graph).
     * @param codes The SPOC codes of values that must be distinct.
     * @return A scan iterators on distinct values, that allows skipping to an offset.
     */
    default BackendIterator<ID, VALUE, SKIP> searchDistinct(final ID s, final ID p, final ID o, final ID c, Set<Integer> codes) {
        throw new UnsupportedOperationException(); // not mandatory
    }

    /**
     * Calls the underlying dictionary to retrieve the identifier
     * corresponding to the value. This enables saving once and for
     * all the identifier for future usage.
     * @param value The value to retrieve the identifier from
     * @param type (Optional) The type of the value to look
     * for. Depending on the backend, it may improve lookup time.
     * @return The identifier of the value.
     */
    default ID getId(final String value, final int... type) {throw new UnsupportedOperationException();}
    default ID getId(final VALUE value, final int... type) {throw new UnsupportedOperationException();}

    /**
     * Calls the underlying dictionary to retrieve the value
     * corresponding to the identifier. This allows a
     * `BackendIterator` to call and cache the value as long as it can
     * stay relevant in the execution context.
     * @param value The identifier of the value to retrieve in the dictionary.
     * @return The value as a string corresponding to the identifier.
     */
    default VALUE getValue(final String value, final int... type) {throw new UnsupportedOperationException();}
    default VALUE getValue(final ID id, final int... type) {throw new UnsupportedOperationException();}

    /**
     * Calls the underlying dictionary to retrieve the value
     * corresponding to the identifier. This allows a
     * `BackendIterator` to call and cache the value as long as it can
     * stay relevant in the execution context.
     * @param id The identifier of the value to retrieve in the dictionary.
     * @return The value as a string corresponding to the identifier.
     */
    default String getString(final ID id, final int... type) {throw new UnsupportedOperationException();}

    /**
     * @return The identifier of the wildcard `any` or `*` for the
     * backend.
     */
    ID any();
}
